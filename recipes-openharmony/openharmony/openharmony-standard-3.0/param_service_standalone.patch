# SPDX-FileCopyrightText: Huawei Inc.
#
# SPDX-License-Identifier: Apache-2.0

Patch for //base/startup/init_lite

param_service: Add standalone param_service executable

In OpenHarmony 3.0 Param Service is a part of the whole Init system. This
service is required by many other services. Therefore we have to split out
the service as an independent from Init when Init is not used.

Signed-off-by: Robert Drab <robert.drab@huawei.com>
Signed-off-by: Thierry Escande <thierry.escande@huawei.com>
Upstream-Status: Inappropriate

diff --git a/services/BUILD.gn b/services/BUILD.gn
index 1994c2ef..bdf34165 100644
--- a/services/BUILD.gn
+++ b/services/BUILD.gn
@@ -85,6 +85,25 @@ if (defined(ohos_lite)) {
 } else {
   import("//build/ohos.gni")
 
+  ohos_executable("param_service") {
+    sources = [ "param/src/param_service_main.c" ]
+    include_dirs = [
+      "//base/startup/init_lite/services/include/param",
+      "//base/startup/init_lite/services/log",
+      "//third_party/cJSON",
+    ]
+    deps = [
+      "//base/startup/init_lite/services/log:init_log",
+      "//base/startup/init_lite/services/param:paramservice",
+    ]
+    install_images = [
+      "system",
+      "updater",
+    ]
+    install_enable = true
+    part_name = "startup_l2"
+  }
+
   ohos_executable("init") {
     sources = [
       "src/device.c",
@@ -132,6 +151,7 @@ if (defined(ohos_lite)) {
 
   group("startup_init") {
     deps = [
+      ":param_service",
       ":init",
       ":init_etc",
       "//base/startup/init_lite/interfaces/innerkits/socket:libsocket",
@@ -180,7 +200,7 @@ if (defined(ohos_lite)) {
 
   ohos_prebuilt_etc("ohos.para") {
     source = "//base/startup/init_lite/services/etc/ohos.para"
-    part_name = "init"
+    part_name = "startup_l2"
   }
 
   group("init_etc") {
diff --git a/services/param/BUILD.gn b/services/param/BUILD.gn
index 07e1d278..ba420b66 100644
--- a/services/param/BUILD.gn
+++ b/services/param/BUILD.gn
@@ -83,7 +83,7 @@ ohos_executable("getparam") {
     "//third_party/cJSON:cjson_static",
   ]
   install_enable = true
-  part_name = "init"
+  part_name = "startup_l2"
 }
 
 ohos_executable("setparam") {
@@ -100,5 +100,5 @@ ohos_executable("setparam") {
     "//third_party/cJSON:cjson_static",
   ]
   install_enable = true
-  part_name = "init"
+  part_name = "startup_l2"
 }
diff --git a/services/param/service/param_service.c b/services/param/service/param_service.c
index cd5d93be..2f0beffe 100644
--- a/services/param/service/param_service.c
+++ b/services/param/service/param_service.c
@@ -131,7 +131,11 @@ static int ProcessParamSet(const RequestMsg *msg)
     ret = WritePersistParam(info[0].value, info[1].value);
     PARAM_CHECK(ret == 0, return ret, "Failed to set param");
     // notify event to process trigger
+// TODO: add some flag or something instead of if 0
+// The following call is a part of OpenHarmony init system
+#if 0
     PostTrigger(EVENT_PROPERTY, msg->content, msg->contentSize);
+#endif
     return 0;
 }
 
@@ -243,6 +247,15 @@ int StartParamService()
     uv_fs_t req;
     uv_fs_unlink(uv_default_loop(), &req, PIPE_NAME, NULL);
 
+    // Stop the param service properly on a few signals
+    uv_signal_t sigterm, sigint, sighup;
+    uv_signal_init(uv_default_loop(), &sigterm);
+    uv_signal_start(&sigterm, StopParamService, SIGTERM);
+    uv_signal_init(uv_default_loop(), &sigint);
+    uv_signal_start(&sigint, StopParamService, SIGINT);
+    uv_signal_init(uv_default_loop(), &sighup);
+    uv_signal_start(&sighup, StopParamService, SIGHUP);
+
     uv_pipe_t pipeServer;
     int ret = uv_pipe_init(uv_default_loop(), &pipeServer, 0);
     PARAM_CHECK(ret == 0, return ret, "Failed to uv_pipe_init %d", ret);
@@ -267,7 +280,11 @@ int SystemWriteParam(const char *name, const char *value)
     PARAM_CHECK(ret == 0, return ret, "Failed to set persist param %s", name);
 
     // notify event to process trigger
+// TODO: add some flag or something instead of if 0
+// The following call is a part of OpenHarmony init system
+#if 0
     PostParamTrigger(name, value);
+#endif
     return ret;
 }
 
diff --git a/services/param/src/param_service_main.c b/services/param/src/param_service_main.c
new file mode 100644
index 00000000..0be35eb9
--- /dev/null
+++ b/services/param/src/param_service_main.c
@@ -0,0 +1,52 @@
+/*
+ * SPDX-FileCopyrightText: Huawei Inc.
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <init_log.h>
+#include <init_param.h>
+#include <errno.h>
+#include <unistd.h>
+
+char *parse_args(int argc, char **argv) {
+    char *fpath = NULL;
+
+    if (argc == 2 && argv[1]) {
+        if (access(argv[1], R_OK) == 0) {
+            fpath = argv[1];
+        }
+    }
+
+    return fpath;
+}
+
+int main(int argc, char **argv)
+{
+    char *params_fpath = "/system/etc/ohos.para";
+
+    if (argc > 1)
+        params_fpath = parse_args(argc, argv);
+
+    if (!params_fpath) {
+        INIT_LOGI("Invalid params file path!");
+        return -EINVAL;
+    }
+
+    InitParamService();
+    int ret = LoadDefaultParams(params_fpath);
+    if (ret) {
+        INIT_LOGE("Failed to load default params! Error code: %d", ret);
+    }
+    ret = LoadPersistParams();
+    if (ret) {
+        INIT_LOGE("Failed to load persist params! Error code: %d", ret);
+    }
+
+    // Following call spins up libuv event loop that will keep service running
+    INIT_LOGI("Starting param service...");
+    StartParamService();
+    INIT_LOGI("Param service stopped.");
+
+    return 0;
+}
