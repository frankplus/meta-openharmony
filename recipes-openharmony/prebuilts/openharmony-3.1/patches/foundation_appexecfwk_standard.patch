# SPDX-FileCopyrightText: Huawei Inc.
#
# SPDX-License-Identifier: Apache-2.0

Patch for //foundation/appexecfwk/standard git repository of OpenHarmony 3.1 codebase.

Use NAPI_*_BOOL() macros to fix implicit cast of nullptr to boolean value
not supported by Clang 14.

Signed-off-by: Esben Haabendal <esben.haabendal@huawei.com>
Upstream-Status: Inappropriate [configuration/integration]

diff --git a/foundation/appexecfwk/standard/interfaces/innerkits/napi/eventhandler/src/events_emitter.cpp b/foundation/appexecfwk/standard/interfaces/innerkits/napi/eventhandler/src/events_emitter.cpp
index 8cfa01831657..59268b1ca5c1 100644
--- a/foundation/appexecfwk/standard/interfaces/innerkits/napi/eventhandler/src/events_emitter.cpp
+++ b/foundation/appexecfwk/standard/interfaces/innerkits/napi/eventhandler/src/events_emitter.cpp
@@ -311,7 +311,7 @@ namespace AppExecFwk {
     {
         napi_valuetype dataType;
         napi_typeof(env, argv, &dataType);
-        NAPI_ASSERT(env, dataType == napi_object, "type mismatch for parameter 2");
+        NAPI_ASSERT_BOOL(env, dataType == napi_object, "type mismatch for parameter 2");
 
         bool hasData = false;
         napi_has_named_property(env, argv, "data", &hasData);
diff --git a/foundation/appexecfwk/standard/kits/appkit/napi/distributebundlemgr/distributed_bundle_mgr.cpp b/foundation/appexecfwk/standard/kits/appkit/napi/distributebundlemgr/distributed_bundle_mgr.cpp
index 36294afbb5f9..4417555703e3 100644
--- a/foundation/appexecfwk/standard/kits/appkit/napi/distributebundlemgr/distributed_bundle_mgr.cpp
+++ b/foundation/appexecfwk/standard/kits/appkit/napi/distributebundlemgr/distributed_bundle_mgr.cpp
@@ -154,7 +154,7 @@ static bool ParseElementName(napi_env env, OHOS::AppExecFwk::ElementName &elemen
     APP_LOGD("begin to parse ElementName");
     napi_status status;
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, args, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, args, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("args not object type");
         return false;
@@ -194,19 +194,19 @@ static bool ParseElementNames(napi_env env, std::vector<ElementName> &elementNam
 {
     APP_LOGD("begin to parse ElementNames");
     bool isArray = false;
-    NAPI_CALL(env, napi_is_array(env, args, &isArray));
+    NAPI_CALL_BOOL(env, napi_is_array(env, args, &isArray));
     if (!isArray) {
         APP_LOGE("parseElementNames args not array");
         return false;
     }
     uint32_t arrayLength = 0;
-    NAPI_CALL(env, napi_get_array_length(env, args, &arrayLength));
+    NAPI_CALL_BOOL(env, napi_get_array_length(env, args, &arrayLength));
     APP_LOGD("arrayLength:%{public}d", arrayLength);
     for (uint32_t i = 0; i < arrayLength; i++) {
         napi_value value = nullptr;
-        NAPI_CALL(env, napi_get_element(env, args, i, &value));
+        NAPI_CALL_BOOL(env, napi_get_element(env, args, i, &value));
         napi_valuetype valueType = napi_undefined;
-        NAPI_CALL(env, napi_typeof(env, value, &valueType));
+        NAPI_CALL_BOOL(env, napi_typeof(env, value, &valueType));
         if (valueType != napi_object) {
             APP_LOGE("array inside not object type");
             elementNames.clear();
diff --git a/foundation/appexecfwk/standard/kits/appkit/napi/launchermgr/js_launcher.cpp b/foundation/appexecfwk/standard/kits/appkit/napi/launchermgr/js_launcher.cpp
index 1ba6ec00e561..5d57fcb50cfd 100644
--- a/foundation/appexecfwk/standard/kits/appkit/napi/launchermgr/js_launcher.cpp
+++ b/foundation/appexecfwk/standard/kits/appkit/napi/launchermgr/js_launcher.cpp
@@ -84,7 +84,7 @@ static bool ParseBundleStatusCallback(napi_env env,
     APP_LOGD("parse bundleStatusCallback begin");
     napi_status status;
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, args, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, args, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("param type mismatch!");
         return false;
@@ -94,7 +94,7 @@ static bool ParseBundleStatusCallback(napi_env env,
     napi_ref addCallback = nullptr;
     napi_value addValue = nullptr;
     status = napi_get_named_property(env, args, "add", &addValue);
-    NAPI_ASSERT(env, status == napi_ok, "property name incorrect!");
+    NAPI_ASSERT_BOOL(env, status == napi_ok, "property name incorrect!");
     napi_typeof(env, addValue, &valueType);
     if (valueType != napi_function) {
         APP_LOGE("add param type mismatch!");
@@ -106,7 +106,7 @@ static bool ParseBundleStatusCallback(napi_env env,
     napi_ref updateCallback = nullptr;
     napi_value updateValue = nullptr;
     status = napi_get_named_property(env, args, "update", &updateValue);
-    NAPI_ASSERT(env, status == napi_ok, "property name incorrect!");
+    NAPI_ASSERT_BOOL(env, status == napi_ok, "property name incorrect!");
     napi_typeof(env, updateValue, &valueType);
     if (valueType != napi_function) {
         APP_LOGE("update param type mismatch!");
@@ -118,7 +118,7 @@ static bool ParseBundleStatusCallback(napi_env env,
     napi_ref removeCallback = nullptr;
     napi_value removeValue = nullptr;
     status = napi_get_named_property(env, args, "remove", &removeValue);
-    NAPI_ASSERT(env, status == napi_ok, "property name incorrect!");
+    NAPI_ASSERT_BOOL(env, status == napi_ok, "property name incorrect!");
     napi_typeof(env, removeValue, &valueType);
     if (valueType != napi_function) {
         APP_LOGE("remove param type mismatch!");
diff --git a/foundation/appexecfwk/standard/kits/appkit/napi/bundlemgr/bundle_mgr.cpp b/foundation/appexecfwk/standard/kits/appkit/napi/bundlemgr/bundle_mgr.cpp
index 119fe1d1b704..3b3983140eac 100644
--- a/foundation/appexecfwk/standard/kits/appkit/napi/bundlemgr/bundle_mgr.cpp
+++ b/foundation/appexecfwk/standard/kits/appkit/napi/bundlemgr/bundle_mgr.cpp
@@ -1393,7 +1393,7 @@ static bool ParseBundleOptions(napi_env env, BundleOptions &bundleOptions, napi_
     APP_LOGD("begin to parse bundleOptions");
     napi_status status;
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, args, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, args, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("args not object type");
         return false;
@@ -1413,7 +1413,7 @@ static bool ParseWant(napi_env env, Want &want, napi_value args)
     APP_LOGD("begin to parse want");
     napi_status status;
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, args, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, args, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("args not object type");
         return false;
@@ -2611,7 +2611,7 @@ static bool ParseInstallParam(napi_env env, InstallParam &installParam, napi_val
 {
     napi_status status;
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, args, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, args, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("args type incorrect!");
         return false;
@@ -2634,7 +2634,7 @@ static bool ParseInstallParam(napi_env env, InstallParam &installParam, napi_val
         }
 
         int userId = Constants::UNSPECIFIED_USERID;
-        NAPI_CALL(env, napi_get_value_int32(env, property, &userId));
+        NAPI_CALL_BOOL(env, napi_get_value_int32(env, property, &userId));
         if (userId < Constants::DEFAULT_USERID) {
             APP_LOGE("param userId(%{public}d) is invalid.", userId);
             return false;
@@ -2660,7 +2660,7 @@ static bool ParseInstallParam(napi_env env, InstallParam &installParam, napi_val
         }
 
         int installFlag = 0;
-        NAPI_CALL(env, napi_get_value_int32(env, property, &installFlag));
+        NAPI_CALL_BOOL(env, napi_get_value_int32(env, property, &installFlag));
         installParam.installFlag = static_cast<OHOS::AppExecFwk::InstallFlag>(installFlag);
     }
     APP_LOGI("ParseInstallParam installFlag=%{public}d.", installParam.installFlag);
@@ -2682,7 +2682,7 @@ static bool ParseInstallParam(napi_env env, InstallParam &installParam, napi_val
         }
 
         bool isKeepData = false;
-        NAPI_CALL(env, napi_get_value_bool(env, property, &isKeepData));
+        NAPI_CALL_BOOL(env, napi_get_value_bool(env, property, &isKeepData));
         installParam.isKeepData = isKeepData;
     }
     APP_LOGI("ParseInstallParam isKeepData=%{public}d.", installParam.isKeepData);
@@ -5441,7 +5441,7 @@ bool UnwrapAbilityInfo(napi_env env, napi_value param, OHOS::AppExecFwk::Ability
 {
     napi_status status;
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, param, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, param, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("param type mismatch!");
         return false;
@@ -6158,7 +6158,7 @@ void CreateInstallErrorCodeObject(napi_env env, napi_value value)
 static bool ParseWant(napi_env env, AsyncExtensionInfoCallbackInfo &info, napi_value args)
 {
     napi_valuetype valueType;
-    NAPI_CALL(env, napi_typeof(env, args, &valueType));
+    NAPI_CALL_BOOL(env, napi_typeof(env, args, &valueType));
     if (valueType != napi_object) {
         APP_LOGE("args not object type");
         return false;
