# SPDX-FileCopyrightText: Huawei Inc.
#
# SPDX-License-Identifier: Apache-2.0

Patch for //base/miscservices/pasteboard git repository of OpenHarmony 3.1 codebase.

This replaces NAPI_CALL() calls with NAPI_CALL_BOOL() in functions
returning a boolean.

Signed-off-by: Thierry Escande <thierry.escande@huawei.com>
Upstream-Status: Inappropriate

diff --git a/base/miscservices/pasteboard/interfaces/kits/napi/src/napi_pastedata_record.cpp b/base/miscservices/pasteboard/interfaces/kits/napi/src/napi_pastedata_record.cpp
index 2658349..f94f446 100644
--- a/base/miscservices/pasteboard/interfaces/kits/napi/src/napi_pastedata_record.cpp
+++ b/base/miscservices/pasteboard/interfaces/kits/napi/src/napi_pastedata_record.cpp
@@ -37,7 +37,7 @@ PasteDataRecordNapi::~PasteDataRecordNapi()
 bool PasteDataRecordNapi::NewInstanceByRecord(
     napi_env env, napi_value &instance, const std::shared_ptr<MiscServices::PasteDataRecord> &record)
 {
-    NAPI_CALL(env, PasteDataRecordNapi::NewInstance(env, instance));
+    NAPI_CALL_BOOL(env, PasteDataRecordNapi::NewInstance(env, instance));
     PasteDataRecordNapi *obj = nullptr;
     napi_status status = napi_unwrap(env, instance, reinterpret_cast<void **>(&obj));
     if ((status != napi_ok) || (obj == nullptr)) {
@@ -50,7 +50,7 @@ bool PasteDataRecordNapi::NewInstanceByRecord(
 
 bool PasteDataRecordNapi::NewHtmlTextRecordInstance(napi_env env, const std::string &text, napi_value &instance)
 {
-    NAPI_CALL(env, PasteDataRecordNapi::NewInstance(env, instance));
+    NAPI_CALL_BOOL(env, PasteDataRecordNapi::NewInstance(env, instance));
     PasteDataRecordNapi *obj = nullptr;
     napi_status status = napi_unwrap(env, instance, reinterpret_cast<void **>(&obj));
     if ((status != napi_ok) || (obj == nullptr)) {
@@ -63,7 +63,7 @@ bool PasteDataRecordNapi::NewHtmlTextRecordInstance(napi_env env, const std::str
 
 bool PasteDataRecordNapi::NewPlainTextRecordInstance(napi_env env, const std::string &text, napi_value &instance)
 {
-    NAPI_CALL(env, PasteDataRecordNapi::NewInstance(env, instance));
+    NAPI_CALL_BOOL(env, PasteDataRecordNapi::NewInstance(env, instance));
     PasteDataRecordNapi *obj = nullptr;
     napi_status status = napi_unwrap(env, instance, reinterpret_cast<void **>(&obj));
     if ((status != napi_ok) || (obj == nullptr)) {
@@ -76,7 +76,7 @@ bool PasteDataRecordNapi::NewPlainTextRecordInstance(napi_env env, const std::st
 
 bool PasteDataRecordNapi::NewUriRecordInstance(napi_env env, const std::string &text, napi_value &instance)
 {
-    NAPI_CALL(env, PasteDataRecordNapi::NewInstance(env, instance));
+    NAPI_CALL_BOOL(env, PasteDataRecordNapi::NewInstance(env, instance));
     PasteDataRecordNapi *obj = nullptr;
     napi_status status = napi_unwrap(env, instance, reinterpret_cast<void **>(&obj));
     if ((status != napi_ok) || (obj == nullptr)) {
@@ -94,7 +94,7 @@ bool PasteDataRecordNapi::NewWantRecordInstance(
         return false;
     }
 
-    NAPI_CALL(env, PasteDataRecordNapi::NewInstance(env, instance));
+    NAPI_CALL_BOOL(env, PasteDataRecordNapi::NewInstance(env, instance));
     PasteDataRecordNapi *obj = nullptr;
     napi_status status = napi_unwrap(env, instance, reinterpret_cast<void **>(&obj));
     if ((status != napi_ok) || (obj == nullptr)) {
