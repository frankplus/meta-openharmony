diff --git a/Makefile b/Makefile
old mode 100644
new mode 100755
diff --git a/arch/arm/bits/signal.h b/arch/arm/bits/signal.h
index 3c789856..4906b482 100644
--- a/arch/arm/bits/signal.h
+++ b/arch/arm/bits/signal.h
@@ -83,4 +83,5 @@ typedef struct __ucontext {
 #define SIGSYS    31
 #define SIGUNUSED SIGSYS
 
+
 #define _NSIG 65
diff --git a/arch/x86_64/bits/signal.h b/arch/x86_64/bits/signal.h
index c99317d3..2a6f2ce7 100644
--- a/arch/x86_64/bits/signal.h
+++ b/arch/x86_64/bits/signal.h
@@ -148,6 +148,8 @@ typedef struct __ucontext {
 #define SIGPWR    30
 #define SIGSYS    31
 #define SIGUNUSED SIGSYS
+#define SIGHOOK   36
+#define SIGUNHOOK 37
 
 #define _NSIG 65
 
diff --git a/dynamic.list b/dynamic.list
index ee0d363b..a8e393d0 100644
--- a/dynamic.list
+++ b/dynamic.list
@@ -14,6 +14,8 @@ memalign;
 posix_memalign;
 aligned_alloc;
 malloc_usable_size;
+mallinfo;
+mallinfo2;
 
 timezone;
 daylight;
@@ -42,4 +44,7 @@ __progname;
 __progname_full;
 
 __stack_chk_guard;
+
+exit;
+_Exit;
 };
diff --git a/include/malloc.h b/include/malloc.h
index 35f8b19c..f771196a 100644
--- a/include/malloc.h
+++ b/include/malloc.h
@@ -18,6 +18,26 @@ void *memalign(size_t, size_t);
 
 size_t malloc_usable_size(void *);
 
+#define __MALLINFO_BODY \
+  size_t arena; \
+  size_t ordblks; \
+  size_t smblks; \
+  size_t hblks; \
+  size_t hblkhd; \
+  size_t usmblks; \
+  size_t fsmblks; \
+  size_t uordblks; \
+  size_t fordblks; \
+  size_t keepcost;
+
+struct mallinfo { __MALLINFO_BODY };
+
+struct mallinfo mallinfo(void);
+
+struct mallinfo2 { __MALLINFO_BODY };
+
+struct mallinfo2 mallinfo2(void);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/include/sys/prctl.h b/include/sys/prctl.h
index 087a75c9..04ce0d4f 100644
--- a/include/sys/prctl.h
+++ b/include/sys/prctl.h
@@ -177,6 +177,9 @@ struct prctl_mm_map {
 #define PR_PAC_SET_ENABLED_KEYS 60
 #define PR_PAC_GET_ENABLED_KEYS 61
 
+#define PR_SET_VMA 0x53564d41
+#define PR_SET_VMA_ANON_NAME 0
+
 int prctl (int, ...);
 
 #ifdef __cplusplus
diff --git a/src/math/x86_64/fabsl.c b/src/math/x86_64/fabsl.c
deleted file mode 100644
index cc1c9ed9..00000000
--- a/src/math/x86_64/fabsl.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include <math.h>
-
-long double fabsl(long double x)
-{
-	__asm__ ("fabs" : "+t"(x));
-	return x;
-}
diff --git a/src/math/x86_64/fmodl.c b/src/math/x86_64/fmodl.c
deleted file mode 100644
index 3daeab06..00000000
--- a/src/math/x86_64/fmodl.c
+++ /dev/null
@@ -1,9 +0,0 @@
-#include <math.h>
-
-long double fmodl(long double x, long double y)
-{
-	unsigned short fpsr;
-	do __asm__ ("fprem; fnstsw %%ax" : "+t"(x), "=a"(fpsr) : "u"(y));
-	while (fpsr & 0x400);
-	return x;
-}
diff --git a/src/math/x86_64/llrintl.c b/src/math/x86_64/llrintl.c
deleted file mode 100644
index c439ef28..00000000
--- a/src/math/x86_64/llrintl.c
+++ /dev/null
@@ -1,8 +0,0 @@
-#include <math.h>
-
-long long llrintl(long double x)
-{
-	long long r;
-	__asm__ ("fistpll %0" : "=m"(r) : "t"(x) : "st");
-	return r;
-}
diff --git a/src/math/x86_64/lrintl.c b/src/math/x86_64/lrintl.c
deleted file mode 100644
index 068e2e4d..00000000
--- a/src/math/x86_64/lrintl.c
+++ /dev/null
@@ -1,8 +0,0 @@
-#include <math.h>
-
-long lrintl(long double x)
-{
-	long r;
-	__asm__ ("fistpll %0" : "=m"(r) : "t"(x) : "st");
-	return r;
-}
diff --git a/src/math/x86_64/remainderl.c b/src/math/x86_64/remainderl.c
deleted file mode 100644
index 8cf75071..00000000
--- a/src/math/x86_64/remainderl.c
+++ /dev/null
@@ -1,9 +0,0 @@
-#include <math.h>
-
-long double remainderl(long double x, long double y)
-{
-	unsigned short fpsr;
-	do __asm__ ("fprem1; fnstsw %%ax" : "+t"(x), "=a"(fpsr) : "u"(y));
-	while (fpsr & 0x400);
-	return x;
-}
diff --git a/src/math/x86_64/remquol.c b/src/math/x86_64/remquol.c
deleted file mode 100644
index 60eef089..00000000
--- a/src/math/x86_64/remquol.c
+++ /dev/null
@@ -1,32 +0,0 @@
-#include <math.h>
-
-long double remquol(long double x, long double y, int *quo)
-{
-	signed char *cx = (void *)&x, *cy = (void *)&y;
-	/* By ensuring that addresses of x and y cannot be discarded,
-	 * this empty asm guides GCC into representing extraction of
-	 * their sign bits as memory loads rather than making x and y
-	 * not-address-taken internally and using bitfield operations,
-	 * which in the end wouldn't work out, as extraction from FPU
-	 * registers needs to go through memory anyway. This way GCC
-	 * should manage to use incoming stack slots without spills. */
-	__asm__ ("" :: "X"(cx), "X"(cy));
-
-	long double t = x;
-	unsigned fpsr;
-	do __asm__ ("fprem1; fnstsw %%ax" : "+t"(t), "=a"(fpsr) : "u"(y));
-	while (fpsr & 0x400);
-	/* C0, C1, C3 flags in x87 status word carry low bits of quotient:
-	 * 15 14 13 12 11 10  9  8
-	 *  . C3  .  .  . C2 C1 C0
-	 *  . b1  .  .  .  0 b0 b2 */
-	unsigned char i = fpsr >> 8;
-	i = i>>4 | i<<4;
-	/* i[5:2] is now {b0 b2 ? b1}. Retrieve {0 b2 b1 b0} via
-	 * in-register table lookup. */
-	unsigned qbits = 0x7575313164642020 >> (i & 60);
-	qbits &= 7;
-
-	*quo = (cx[9]^cy[9]) < 0 ? -qbits : qbits;
-	return t;
-}
diff --git a/src/math/x86_64/rintl.c b/src/math/x86_64/rintl.c
deleted file mode 100644
index e1a92077..00000000
--- a/src/math/x86_64/rintl.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include <math.h>
-
-long double rintl(long double x)
-{
-	__asm__ ("frndint" : "+t"(x));
-	return x;
-}
diff --git a/src/math/x86_64/sqrtl.c b/src/math/x86_64/sqrtl.c
deleted file mode 100644
index 864cfcc4..00000000
--- a/src/math/x86_64/sqrtl.c
+++ /dev/null
@@ -1,7 +0,0 @@
-#include <math.h>
-
-long double sqrtl(long double x)
-{
-	__asm__ ("fsqrt" : "+t"(x));
-	return x;
-}
diff --git a/src/mman/mmap.c b/src/mman/mmap.c
index eff88d82..e8d67d97 100644
--- a/src/mman/mmap.c
+++ b/src/mman/mmap.c
@@ -22,6 +22,10 @@ void *__mmap(void *start, size_t len, int prot, int flags, int fd, off_t off)
 		errno = ENOMEM;
 		return MAP_FAILED;
 	}
+	if (len == 0) {
+                errno = EINVAL;
+                return MAP_FAILED;
+	}
 	if (flags & MAP_FIXED) {
 		__vm_wait();
 	}
@@ -36,6 +40,21 @@ void *__mmap(void *start, size_t len, int prot, int flags, int fd, off_t off)
 	return (void *)__syscall_ret(ret);
 }
 
-weak_alias(__mmap, mmap);
 
+#ifdef HOOK_ENABLE
+void* __libc_mmap(void*, size_t, int, int, int, off_t);
+weak_alias(__mmap, __libc_mmap);
+weak_alias(__libc_mmap, mmap64);
+#else
+weak_alias(__mmap, mmap);
 weak_alias(mmap, mmap64);
+#endif // HOOK_ENABLE
+
+/* 
+Adapter function for lldb to not deal with 64-bit arguments on 32-bit systems 
+Issue I661Z1
+Test: Build and boot devices.
+*/
+void *__lldb_mmap(void *start, size_t len, int prot, int flags, int fd, intptr_t off) {
+	return mmap(start, len, prot, flags, fd, off);
+}
diff --git a/src/mman/munmap.c b/src/mman/munmap.c
index 2bf83bbe..3ddedfeb 100644
--- a/src/mman/munmap.c
+++ b/src/mman/munmap.c
@@ -10,4 +10,9 @@ int __munmap(void *start, size_t len)
 	return syscall(SYS_munmap, start, len);
 }
 
+#ifdef HOOK_ENABLE
+int __libc_munmap(void*, size_t);
+weak_alias(__munmap, __libc_munmap);
+#else
 weak_alias(__munmap, munmap);
+#endif
diff --git a/src/network/freeaddrinfo.c b/src/network/freeaddrinfo.c
index 62241c23..3b6f8337 100644
--- a/src/network/freeaddrinfo.c
+++ b/src/network/freeaddrinfo.c
@@ -6,10 +6,12 @@
 
 void freeaddrinfo(struct addrinfo *p)
 {
+	if (!p) {
+		return;
+	}
 	size_t cnt;
-	for (cnt=1; p->ai_next; cnt++, p=p->ai_next);
 	struct aibuf *b = (void *)((char *)p - offsetof(struct aibuf, ai));
-	b -= b->slot;
+	for (cnt=1; p->ai_next; cnt++, p=p->ai_next);
 	LOCK(b->lock);
 	if (!(b->ref -= cnt)) free(b);
 	else UNLOCK(b->lock);
diff --git a/src/network/getaddrinfo.c b/src/network/getaddrinfo.c
index efaab306..0d0a6222 100644
--- a/src/network/getaddrinfo.c
+++ b/src/network/getaddrinfo.c
@@ -11,6 +11,13 @@
 
 int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
 {
+#if OHOS_DNS_PROXY_BY_NETSYS
+	if (dns_get_addr_info_from_netsys_cache(host, serv, hint, res) == 0) {
+		DNS_CONFIG_PRINT("get from netsys cache OK\n");
+		return 0;
+	}
+#endif
+
 	struct service ports[MAXSERVS];
 	struct address addrs[MAXADDRS];
 	char canon[256], *outcanon;
@@ -131,5 +138,8 @@ int getaddrinfo(const char *restrict host, const char *restrict serv, const stru
 	}
 	out[0].ref = nais;
 	*res = &out->ai;
+#if OHOS_DNS_PROXY_BY_NETSYS
+	dns_set_addr_info_to_netsys_cache(host, serv, hint, *res);
+#endif
 	return 0;
 }
diff --git a/src/network/lookup.h b/src/network/lookup.h
index ef662725..1dc5eeef 100644
--- a/src/network/lookup.h
+++ b/src/network/lookup.h
@@ -7,6 +7,19 @@
 #include <netinet/in.h>
 #include <netdb.h>
 
+#if OHOS_DNS_PROXY_BY_NETSYS
+
+#include <stdio.h>
+
+#if DNS_CONFIG_DEBUG
+#ifndef DNS_CONFIG_PRINT
+#define DNS_CONFIG_PRINT(fmt, ...) printf("DNS " fmt "\n", ##__VA_ARGS__)
+#endif
+#else
+#define DNS_CONFIG_PRINT(fmt, ...)
+#endif
+#endif
+
 struct aibuf {
 	struct addrinfo ai;
 	union sa {
@@ -52,4 +65,66 @@ hidden int __res_msend_rc(int, const unsigned char *const *, const int *, unsign
 
 hidden int __dns_parse(const unsigned char *, int, int (*)(void *, int, const void *, int, const void *), void *);
 
+#if OHOS_DNS_PROXY_BY_NETSYS
+#define DNS_SO_PATH "libnetsys_client.z.so"
+#define MAX_SERVER_NUM 4
+#define MAX_SERVER_LENGTH 50
+#define OHOS_GET_CONFIG_FUNC_NAME "NetSysGetResolvConf"
+#define OHOS_GET_CACHE_FUNC_NAME "NetSysGetResolvCache"
+#define OHOS_SET_CACHE_FUNC_NAME "NetSysSetResolvCache"
+#define MAX_RESULTS 32
+#define MAX_CANON_NAME 256
+#define MACRO_MIN(a, b) ((a) < (b) ? (a) : (b))
+
+struct resolv_config {
+	int32_t error;
+	int32_t timeout_ms;
+	uint32_t retry_count;
+	char nameservers[MAX_SERVER_NUM][MAX_SERVER_LENGTH + 1];
+};
+
+typedef union {
+	struct sockaddr sa;
+	struct sockaddr_in6 sin6;
+	struct sockaddr_in sin;
+} aligned_sockAddr;
+
+struct addr_info_wrapper {
+	uint32_t ai_flags;
+	uint32_t ai_family;
+	uint32_t ai_sockType;
+	uint32_t ai_protocol;
+	uint32_t ai_addrLen;
+	aligned_sockAddr ai_addr;
+	char ai_canonName[MAX_CANON_NAME + 1];
+};
+
+struct param_wrapper {
+	char *host;
+	char *serv;
+	struct addrinfo *hint;
+};
+
+typedef int32_t (*GetConfig)(uint16_t netId, struct resolv_config *config);
+
+typedef int32_t (*GetCache)(uint16_t netId, struct param_wrapper param,
+							struct addr_info_wrapper addr_info[static MAX_RESULTS],
+							uint32_t *num);
+
+typedef int32_t (*SetCache)(uint16_t netId, struct param_wrapper param, struct addrinfo *res);
+
+/* If the memory holder points to stores NULL value, try to load symbol from the
+ * dns lib into holder; otherwise, it does nothing. */
+hidden void resolve_dns_sym(void **holder, const char *symbol);
+
+void
+dns_set_addr_info_to_netsys_cache(const char *__restrict host, const char *__restrict serv,
+								  const struct addrinfo *__restrict
+								  hint, struct addrinfo *res);
+
+int dns_get_addr_info_from_netsys_cache(const char *__restrict host, const char *__restrict serv,
+										const struct addrinfo *__restrict hint, struct addrinfo **__restrict res);
+
+#endif
+
 #endif
diff --git a/src/network/lookup_name.c b/src/network/lookup_name.c
index aa558c19..3f00d7c6 100644
--- a/src/network/lookup_name.c
+++ b/src/network/lookup_name.c
@@ -15,6 +15,10 @@
 #include "stdio_impl.h"
 #include "syscall.h"
 
+#if OHOS_PERMISSION_INTERNET
+uint8_t is_allow_internet(void);
+#endif
+
 static int is_valid_hostname(const char *host)
 {
 	const unsigned char *s;
@@ -177,6 +181,13 @@ static int name_from_dns(struct address buf[static MAXADDRS], char canon[static
 
 static int name_from_dns_search(struct address buf[static MAXADDRS], char canon[static 256], const char *name, int family)
 {
+#if OHOS_PERMISSION_INTERNET
+	if (is_allow_internet() == 0) {
+		errno = EPERM;
+		return -1;
+	}
+#endif
+
 	char search[256];
 	struct resolvconf conf;
 	size_t l, dots;
diff --git a/src/network/resolvconf.c b/src/network/resolvconf.c
index ceabf080..73de25fa 100644
--- a/src/network/resolvconf.c
+++ b/src/network/resolvconf.c
@@ -5,6 +5,9 @@
 #include <string.h>
 #include <stdlib.h>
 #include <netinet/in.h>
+#if OHOS_DNS_PROXY_BY_NETSYS
+#include <dlfcn.h>
+#endif
 
 int __get_resolv_conf(struct resolvconf *conf, char *search, size_t search_sz)
 {
@@ -18,6 +21,57 @@ int __get_resolv_conf(struct resolvconf *conf, char *search, size_t search_sz)
 	conf->attempts = 2;
 	if (search) *search = 0;
 
+#if OHOS_DNS_PROXY_BY_NETSYS
+	void *handle = dlopen(DNS_SO_PATH, RTLD_LAZY);
+	if (handle == NULL) {
+		DNS_CONFIG_PRINT("__get_resolv_conf dlopen err %s\n", dlerror());
+		goto etc_resolv_conf;
+	}
+
+	GetConfig func = dlsym(handle, OHOS_GET_CONFIG_FUNC_NAME);
+	if (func == NULL) {
+		DNS_CONFIG_PRINT("__get_resolv_conf dlsym err %s\n", dlerror());
+		dlclose(handle);
+		goto etc_resolv_conf;
+	}
+
+	struct resolv_config config = {0};
+	int ret = func(0, &config);
+	dlclose(handle);
+	if (ret < 0) {
+		DNS_CONFIG_PRINT("__get_resolv_conf OHOS_GET_CONFIG_FUNC_NAME err %d\n", ret);
+		goto etc_resolv_conf;
+	}
+	int32_t timeout_second = config.timeout_ms / 1000;
+#endif
+
+#if OHOS_DNS_PROXY_BY_NETSYS
+netsys_conf:
+	if (timeout_second > 0) {
+		if (timeout_second >= 60) {
+			conf->timeout = 60;
+		} else {
+			conf->timeout = timeout_second;
+		}
+	}
+	if (config.retry_count > 0) {
+		if (config.retry_count >= 10) {
+			conf->attempts = 10;
+		} else {
+			conf->attempts = config.retry_count;
+		}
+	}
+	for (int i = 0; i < MAX_SERVER_NUM; ++i) {
+		if (config.nameservers[i] == NULL || config.nameservers[i][0] == 0 || nns >= MAXNS) {
+			continue;
+		}
+		if (__lookup_ipliteral(conf->ns + nns, config.nameservers[i], AF_UNSPEC) > 0) {
+			nns++;
+		}
+	}
+
+etc_resolv_conf:
+#endif
 	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);
 	if (!f) switch (errno) {
 	case ENOENT:
diff --git a/src/network/socket.c b/src/network/socket.c
index afa1a7f3..b857dbe7 100644
--- a/src/network/socket.c
+++ b/src/network/socket.c
@@ -1,10 +1,51 @@
 #include <sys/socket.h>
 #include <fcntl.h>
 #include <errno.h>
+#include <dlfcn.h>
+#include <stdint.h>
+#include <stddef.h>
 #include "syscall.h"
 
+#if OHOS_PERMISSION_INTERNET
+typedef uint8_t (*AllowFunc)(void);
+static const char *LIB_NETSYS_CLIENT_NAME = "libnetsys_client.z.so";
+static const char *ALLOW_SOCKET_FUNC_NAME = "IsAllowInternet";
+
+/*
+ * Read a flag from netsys_client, there is only one place to set this flag, is the
+ * founction named DoStartup in startup_appspawn.
+ * */
+uint8_t is_allow_internet(void)
+{
+	static uint8_t first_time = 1;
+	static uint8_t allow = 1;
+
+	if (!first_time) {
+		return allow;
+	}
+
+	void *handler = dlopen(LIB_NETSYS_CLIENT_NAME, RTLD_LAZY);
+	if (handler != NULL) {
+		AllowFunc func = (AllowFunc)dlsym(handler, ALLOW_SOCKET_FUNC_NAME);
+		if (func != NULL && func() == 0) {
+			allow = 0;
+		}
+		dlclose(handler);
+	}
+	first_time = 0;
+	return allow;
+}
+#endif
+
 int socket(int domain, int type, int protocol)
 {
+#if OHOS_PERMISSION_INTERNET
+	if ((domain == AF_INET || domain == AF_INET6) && is_allow_internet() == 0) {
+		errno = EPERM;
+		return -1;
+	}
+#endif
+
 	int s = __socketcall(socket, domain, type, protocol, 0, 0, 0);
 	if ((s==-EINVAL || s==-EPROTONOSUPPORT)
 	    && (type&(SOCK_CLOEXEC|SOCK_NONBLOCK))) {
diff --git a/src/thread/pthread_create.c b/src/thread/pthread_create.c
index 6f187ee8..d539880e 100644
--- a/src/thread/pthread_create.c
+++ b/src/thread/pthread_create.c
@@ -6,6 +6,15 @@
 #include <sys/mman.h>
 #include <string.h>
 #include <stddef.h>
+#include <stdarg.h>
+
+void log_print(const char* info,...)
+{
+    va_list ap;
+    va_start(ap, info);
+    vfprintf(stdout,info, ap);
+    va_end(ap);
+}
 
 static void dummy_0()
 {
@@ -391,3 +400,34 @@ fail:
 
 weak_alias(__pthread_exit, pthread_exit);
 weak_alias(__pthread_create, pthread_create);
+
+struct pthread* __pthread_list_find(pthread_t thread_id, const char* info)
+{
+    struct pthread *thread = (struct pthread *)thread_id; 
+    if (NULL == thread) {
+        log_print("invalid pthread_t (0) passed to %s\n", info);
+        return NULL;
+    }
+
+    struct pthread *self = __pthread_self();
+    if (thread == self) {
+        return thread;
+    }
+    struct pthread *t = self;
+    t = t->next ;
+    while (t != self) {
+        if (t == thread) return thread;
+        t = t->next ;
+    }
+    log_print("invalid pthread_t %p passed to %s\n", thread, info); 
+    return NULL;
+}
+
+pid_t __pthread_gettid_np(pthread_t t)
+{
+    __tl_lock();
+    struct pthread* thread = __pthread_list_find(t, "pthread_gettid_np");
+    __tl_unlock();
+    return thread ? thread->tid : -1;
+}
+weak_alias(__pthread_gettid_np, pthread_gettid_np);
\ No newline at end of file
